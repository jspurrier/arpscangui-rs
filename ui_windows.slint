import { Button, VerticalBox, ListView, LineEdit, HorizontalBox } from "std-widgets.slint";

struct ScanResult {
    ip: string,
    mac: string,
    manufacturer: string
}

export component MainWindow inherits Window {
    title: "ARP Scanner";
    width: 1000px;
    preferred-height: 600px;

    callback close_window();
    callback scan_network(string);
    callback open_http(string);
    callback open_https(string);
    callback filter_by_mac(string);  // Still named filter_by_mac for compatibility

    in property <image> background_image;
    in-out property <string> status: "Ready";
    in-out property <[ScanResult]> scan_results;

    VerticalBox {
        padding: 5px;
        spacing: 0px;
        height: 100%;

        HorizontalBox {
            padding: 2px;
            spacing: 5px;
            alignment: start;
            Text {
                text: "Network (CIDR):";
                vertical-alignment: center;
            }
            network_input := LineEdit {
                placeholder-text: "e.g., 192.168.1.0/24";
                width: 120px;
            }
            Button {
                text: "Scan";
                width: 60px;
                height: 30px;
                clicked => { scan_network(network_input.text); }
            }
            Rectangle {
                width: 1px;
                height: 1px;
                horizontal-stretch: 2;
            }
            Button {
                text: "Close";
                width: 60px;
                height: 30px;
                clicked => { close_window(); }
            }
        }

        VerticalBox {
            spacing: 0px;
            padding: 0px;

            Text {
                text: "Status: " + root.status;
                color: white;
                padding: 0px;
                height: 20px;
                vertical-stretch: 0;
                vertical-alignment: top;
            }

            Rectangle {
                background: rgba(0, 0, 0, 0.7);
                border-radius: 5px;
                width: 100%;
                padding: 0px;
                vertical-stretch: 1;

                VerticalBox {
                    padding: 0px;
                    spacing: 0px;
                    ListView {
                        width: parent.width;
                        for result in root.scan_results : HorizontalBox {
                            width: parent.width;
                            padding: 2px;
                            spacing: 5px;

                            Text {
                                text: result.ip;
                                color: white;
                                width: 150px;
                                horizontal-alignment: left;
                            }
                            Text {
                                text: result.mac;
                                color: white;
                                width: 150px;
                                horizontal-alignment: left;
                            }
                            Text {
                                text: result.manufacturer;
                                color: white;
                                width: 200px;
                                horizontal-alignment: left;
                            }
                            Button {
                                text: "HTTP";
                                width: 60px;
                                height: 30px;
                                clicked => { open_http(result.ip); }
                            }
                            Button {
                                text: "HTTPS";
                                width: 60px;
                                height: 30px;
                                clicked => { open_https(result.ip); }
                            }
                        }
                    }
                }
            }

            HorizontalBox {
                padding: 2px;
                spacing: 5px;
                Text {
                    text: "Filter by MAC/Manufacturer:";
                    vertical-alignment: center;
                }
                mac_filter_input := LineEdit {
                    placeholder-text: "e.g., 00:0a or Apple";
                    width: 150px;
                }
                Button {
                    text: "Filter";
                    width: 60px;
                    height: 30px;
                    clicked => { filter_by_mac(mac_filter_input.text); }
                }
            }
        }
    }
}