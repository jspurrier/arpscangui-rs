import { VerticalBox, HorizontalBox, LineEdit, Button } from "std-widgets.slint";

export struct ScanResult {
    ip: string,
    mac: string,
    manufacturer: string
}

export component MainWindow inherits Window {
    title: "ARP Table Scanner";
    preferred-width: 1000px;
    preferred-height: 800px;
    background: #2b2b2b; // Always solid background

    // Background image (optional, no window transparency)
    background_layer := Image {
        source: background-image;
        width: parent.width;
        height: parent.height;
        opacity: 0.25; // Fully opaque image; adjust if desired (e.g., 0.5 for 50% transparency)
    }

    VerticalBox {
        width: 1000px;
        padding: 10px;
        spacing: 10px;

        Text {
            text: "ARP Table Scanner";
            color: #ffffff;
            font-size: 24px;
            horizontal-alignment: center;
        }

        HorizontalBox {
            width: 400px;
            Text {
                text: "Network/Subnet (e.g., 192.168.1.0/24):";
                color: #ffffff;
                font-size: 14px;
                vertical-alignment: center;
            }
            network_input := LineEdit {
                placeholder-text: "192.168.1.0/24";
                width: 200px;
            }
            Button {
                text: "Start Scan";
                primary: true;
                width: 120px;
                clicked => { root.scan-network(network_input.text) }
            }
        }

        VerticalBox {
            height: 600px;
            width: 1000px;
            for result in root.scan-results : Rectangle {
                padding: 2px;
                HorizontalBox {
                    Text { 
                        text: result.ip;
                        color: #ffffff;
                        width: 150px;
                    }
                    Text { 
                        text: result.mac;
                        color: #ffffff;
                        width: 150px;
                    }
                    Text { 
                        text: result.manufacturer;
                        color: #ffffff;
                        width: 450px;
                    }
                    Button {
                        text: "HTTP";
                        width: 80px;
                        clicked => { root.open-http(result.ip) }
                    }
                    Button {
                        text: "HTTPS";
                        width: 80px;
                        clicked => { root.open-https(result.ip) }
                    }
                }
            }
        }

        HorizontalBox {
            width: 1000px;
            padding-right: 20px;
            status_text := Text {
                text: root.status;
                color: #00ff00;
                font-size: 12px;
                horizontal-alignment: left;
                width: 880px;
                padding-top: 18px;
            }
            Button {
                text: "Close";
                primary: true;
                width: 100px;
                clicked => { root.close-window() }
            }
        }
    }

    // Custom warning popup
    warning_popup := Rectangle {
        visible: popup-visible;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        width: 400px;
        height: 200px;
        background: #333333;
        border-color: #ffffff;
        border-width: 2px;
        VerticalBox {
            padding: 20px;
            spacing: 20px;
            Text {
                text: "On Linux with sudo, please close your browser before opening HTTP/HTTPS URLs to avoid conflicts.";
                color: #ffffff;
                font-size: 14px;
                horizontal-alignment: center;
            }
            HorizontalBox {
                spacing: 10px;
                alignment: center;
                Button {
                    text: "OK";
                    clicked => { popup-visible = false; root.proceed-with-url() }
                }
            }
        }
    }

    in-out property <[ScanResult]> scan-results: [];
    in-out property <string> status: "Ready";
    in-out property <bool> popup-visible: false;
    in-out property <image> background-image; // Only for the image layer
    callback scan-network(string);
    callback close-window();
    callback open-http(string);
    callback open-https(string);
    callback show-warning();
    callback proceed-with-url();
}
